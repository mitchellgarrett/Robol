Program ::= FunctionList
FunctionList ::= Function FunctionList | null
Function ::= ReturnType Identifier(ParameterList) { StatementList }

StatementList ::= Statement StatementList | null
Statement ::= Declaration; | Initialization; | Assignment; | FunctionCall; | return Expression; | ;

// TODO: make distinction between definition/declaration
Declaration ::= VariableType Identifier | VariableType Identifier = Expression
Assignment ::= Identifier = Expression

Expression ::= UnaryExpression | ArithmeticExpression | LogicalExpression

UnaryExpression ::= ???

ArithmeticExpression ::= MultiplicativeExpression +|- Expression
MultiplicativeExpression ::= ExponentialExpression *|/|% Expression
ExponentialExpression ::= Primary ^ Primary

LogicalExpression ::= LogicalOrExpression
LogicalOrExpression ::= LogicalAndExpression | LogicalOrExpression or LogicalAndExpression
LogicalAndExpression ::= LogicalAndExpression and LogicalOrExpression | null

Primary ::= Identifier | FunctionCall | (Expression) | Constant | UnaryOperator Primary
FunctionCall ::= Identifier(ArgumentList)

ParameterList ::= Parameter, ParameterList | null
Parameter ::= VariableType Identifier

ArgumentList ::= Argument, ArgumentList | null
Argument ::= Expression

Constant ::= IntegerConstant | NumberConstant | ByteConstant | CharacterConstant | StringConstant
IntegerConstant ::= [0-9]+
NumberConstant ::= [0-9]+(.[0-9]*)?
ByteConstant ::= [a-fA-F0-9]
CharacterConstant ::= '[a-zA-Z0-9]'
StringConstant ::= "[a-zA-Z0-9]*"

VariableType ::= int | num | byte | char | string | obj | ClassType
Identifier ::= ([_a-zA-Z][_a-zA-Z0-9]*)([\._a-zA-Z][_a-zA-Z0-9]*) // TODO: remove '.'

// TODO:
// Comments
// Logical statements
// If statements
// Loops
// Enums
// Arrays
// Classes
// Libraries
// File inclusion

ClassDeclaration ::= class ClassType { ClassMemberList }
ClassType ::= Identifier
ClassMemberList ::= ClassMember ClassMemberList | null
ClassMember ::= Declaration | Function